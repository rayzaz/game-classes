// src/data/merged.ts
// Слияние: берём базу из classes.ts и переопределяем role/tags по утверждённым правилам.

import BASE from './classes';

type Override = { role?: string; tags?: string[] };

// Все варианты написания имён — на всякий случай с разными регистрами/знаками
const OVERRIDES: Record<string, Override> = {
  // Бафферы
  'Баффер': { role: 'Поддержка', tags: ['поддержка'] },

  // Баффер-Знахарь — гибрид: поддержка + лечение + ресурсы
  'Баффер-знахарь': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'ресурсы', 'гибрид'] },
  'Баффер-Знахарь': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'ресурсы', 'гибрид'] },

  // Брузер / Дамагер
  'Брузер': { role: 'Урон, Защита', tags: ['урон', 'защита'] },
  'Дамагер': { role: 'Урон', tags: ['урон'] },

  // Дебафферы
  'Дебаффер': { role: 'Контроль', tags: ['контроль'] },

  // Дебаффер-Знахарь — гибрид: контроль + лечение + ресурсы
  'Дебаффер-знахарь': { role: 'Гибрид', tags: ['контроль', 'лечение', 'ресурсы', 'гибрид'] },
  'Дебаффер-Знахарь': { role: 'Гибрид', tags: ['контроль', 'лечение', 'ресурсы', 'гибрид'] },

  // Знахарь — логично добавить «Поддержку» в теги
  'Знахарь': { role: 'Лечение, Ресурсы', tags: ['лечение', 'ресурсы', 'поддержка'] },

  // Призыватели
  'Призыватель (дд)': { role: 'Призыв, Урон', tags: ['призыв', 'урон'] },
  'Призыватель (ДД)': { role: 'Призыв, Урон', tags: ['призыв', 'урон'] },

  'Призыватель (мульти)': {
    role: 'Универсал',
    tags: ['универсал', 'призыв', 'поддержка', 'урон'],
  },
  'Призыватель (Мульти)': {
    role: 'Универсал',
    tags: ['универсал', 'призыв', 'поддержка', 'урон'],
  },

  'Призыватель (сап)': { role: 'Призыв, Поддержка', tags: ['призыв', 'поддержка'] },
  'Призыватель (Сап)': { role: 'Призыв, Поддержка', tags: ['призыв', 'поддержка'] },

  // Сапорт ×3
  'Сапорт ×3 (Знахарь)': {
    role: 'Универсал',
    tags: ['универсал', 'поддержка', 'контроль', 'лечение', 'ресурсы'],
  },
  'Сапорт х3 (знахарь)': {
    role: 'Универсал',
    tags: ['универсал', 'поддержка', 'контроль', 'лечение', 'ресурсы'],
  },

  // ВАЖНО: как ты просила — обычный Сапорт ×3 снова отмечаем как «Универсал»
  'Сапорт ×3': { role: 'Универсал', tags: ['универсал', 'поддержка', 'контроль'] },
  'Сапорт х3': { role: 'Универсал', tags: ['универсал', 'поддержка', 'контроль'] },

  // Фронт
  'Танк': { role: 'Защита, Контроль', tags: ['защита', 'контроль'] },

  // Убийца — поддержка+контроль (как мы договорились)
  'Убийца': { role: 'Поддержка, Контроль', tags: ['поддержка', 'контроль'] },

  // Хилеры
  'Хилер': { role: 'Поддержка', tags: ['поддержка', 'лечение'] },
  'Хилер-баффер': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'гибрид'] },
  'Хилер-Баффер': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'гибрид'] },
  'Хилер-дебаффер': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'контроль', 'гибрид'] },
  'Хилер-Дебаффер': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'контроль', 'гибрид'] },
  'Хилер-знахарь': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'ресурсы', 'гибрид'] },
  'Хилер-Знахарь': { role: 'Гибрид', tags: ['поддержка', 'лечение', 'ресурсы', 'гибрид'] },

  // запасной кейс (не используется в выдаче, но пусть останется)
  'В РАЗРАБОТКЕ': { role: 'nan', tags: ['nan'] },
};

// Чистка слов типа «керри/финишер» в role
const BAD_TERMS = ['керри','carry','карри','кери','кэрри','финишер','финшер','finisher'];

function sanitizeRole(input?: string) {
  if (!input) return input;
  let s = input.toLowerCase();
  for (const w of BAD_TERMS) s = s.replace(new RegExp(`\\b${w}\\b`, 'gi'), '');
  s = s
    .replace(/[—–]/g, '-')
    .replace(/\s*-\s*/g, '-')
    .replace(/[,/;]+/g, ', ')
    .replace(/\s{2,}/g, ' ')
    .trim();
  // Для красоты — с заглавной
  return s ? s[0].toUpperCase() + s.slice(1) : undefined;
}

// 1) база + оверрайды
const BASE_MERGED = (BASE as any[]).map((c) => {
  const o = (OVERRIDES as Record<string, Override>)[String(c.name)];
  let role = o?.role ?? c.role;
  role = sanitizeRole(role);

  let tags = o?.tags;
  if (Array.isArray(tags)) {
    const seen = new Set<string>();
    tags = tags
      .map(t => (t ?? '').toString().trim().toLowerCase())
      .filter(t => t && !seen.has(t) && (seen.add(t), true));
    if (tags.length === 0) tags = undefined;
  }

  return { ...c, role, tags };
}).sort((a, b) => String(a.name).localeCompare(String(b.name), 'ru'));

// 2) плейсхолдер ПЕРВЫМ
const MERGED = [
  {
    id: 'placeholder',
    name: 'В разработке',
    placeholder: true,
    image: '/cards/placeholder.png', // public/cards/placeholder.png
  },
  ...BASE_MERGED,
];

export default MERGED;
export type ClassItem = (typeof MERGED)[number];
